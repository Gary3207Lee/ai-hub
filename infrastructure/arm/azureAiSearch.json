{
    "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "rgName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Provide the name of the resource group where the Azure AI Search instance that will be created"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Select the location for the Azure AI Search instance that will be created"
            }
        },
        "prefix": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Provide name for the Azure AI Search instance that will be created"
            }
        },
        "aiSearchSubnetId": {
            "type": "string",
            "metadata": {
                "description": "Provide the subnet id where the Azure AI Search instance that will be connected"
            },
            "defaultValue": ""
        },
        "aiSearchSystemIdentity": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "aiSearchNwLocation": {
            "type": "string",
            "defaultValue": "[parameters('location')]"
        },
        "aiSearchDisableNetworkAccess": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "aiSearchRbacAuthz": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "aiSearchEncryption": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "aiSearchMonCreation": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "aiSearchReplicas": {
            "type": "string",
            "defaultValue": "1"
        },
        "aiSearchPartitions": {
            "type": "string",
            "defaultValue": "1"
        },
        "aiUseCaseSelection": {
            "type": "string",
            "defaultValue": ""
        },
        "cosmosaccountName": {
            "type": "string",
            "defaultValue": ""
        },
        "openAiName":{
            "type": "string",
            "defaultValue": ""
        }
    },
    "variables": {
        "name-compliant-azureAiSearch": "[toLower(concat(parameters('prefix'), '-', parameters('location'), '-azaisearch'))]",
        "name-compliant-azureAiSearch-pe": "[toLower(concat(parameters('prefix'), '-', parameters('location'), '-azaisearch-pe'))]",
        "name-compliant-azureAiSearch-pe-dns": "[toLower(concat(parameters('prefix'), '-', parameters('location'), '-azaisearch-pe-dns'))]",
        "name-compliant-azureAiSearch-asg": "[toLower(concat(parameters('prefix'), '-', parameters('location'), '-azaisearch-asg'))]",
        "name-compliant-azureAiSearch-nic": "[concat(variables('name-compliant-azureAiSearch'), '-nic')]",
        "name-compliant-azureAiSearch-sharedpl-cosmos": "[toLower(concat(parameters('prefix'), '-', parameters('location'), '-azaisearch-spl-cosmos'))]",
        "name-compliant-azureAiSearch-sharedpl-oai": "[toLower(concat(parameters('prefix'), '-', parameters('location'), '-azaisearch-spl-oai'))]",
        "name-compliant-storage": "[toLower(take(concat(replace(replace(parameters('prefix'), '-', ''), '_', ''), parameters('location'), uniqueString(deployment().name)), 23))]",
        "name-compliant-azMon": "[concat(parameters('prefix'), '-', parameters('location'), '-azmon')]",
        "aiSearchIdentity": {
            "type": "SystemAssigned"
        },
        "denyFwAcl": {
            "defaultAction": "Deny",
            "bypass": "AzureServices",
            "ipRules": [],
            "virtualNetworkRules": []
        }
    },
    "resources": [
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2022-09-01",
            "name": "[parameters('rgName')]",
            "location": "[parameters('location')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2022-09-01",
            "name": "azureAiSearch",
            "resourceGroup": "[parameters('rgName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups/', parameters('rgName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "resources": [
                        {
                            "type": "Microsoft.Search/searchServices",
                            "apiVersion": "2023-11-01",
                            "name": "[variables('name-compliant-azureAiSearch')]",
                            "location": "[parameters('location')]",
                            "identity": "[if(equals(parameters('aiSearchSystemIdentity'), 'Yes'), variables('aiSearchIdentity'), json('null'))]",
                            "sku": {
                                "name": "[if(equals(parameters('aiUseCaseSelection'), 'ecomm'), 'standard2', 'standard')]"
                            },
                            "properties": {
                                "replicaCount": "[int(parameters('aiSearchReplicas'))]",
                                "partitionCount": "[int(parameters('aiSearchPartitions'))]",
                                "hostingMode": "default",
                                "publicNetworkAccess": "[if(equals(parameters('aiSearchDisableNetworkAccess'), 'Yes'), 'Disabled', 'Enabled')]",
                                "disableLocalAuth": "[if(equals(parameters('aiSearchRbacAuthz'), 'Yes'), bool('true'), bool('false'))]",
                                "networkAcls": "[if(equals(parameters('aiSearchDisableNetworkAccess'), 'Yes'), variables('denyFwAcl'), json('null'))]",
                                "encryptionWithCmk": {
                                    "enforcement": "[if(equals(parameters('aiSearchEncryption'), 'Yes'), 'Enabled', 'Disabled')]"
                                },
                                "semanticSearch": "[if(equals(parameters('aiUseCaseSelection'), 'ecomm'), 'standard', 'disabled')]"
                            }
                        },
                        {
                            "condition": "[equals(parameters('aiSearchMonCreation'), 'Yes')]",
                            "type": "Microsoft.Search/searchServices/providers/diagnosticSettings",
                            "apiVersion": "2021-05-01-preview",
                            "name": "[concat(variables('name-compliant-azureAiSearch'), '/', 'Microsoft.Insights/diag')]",
                            "location": "[parameters('location')]",
                            "dependsOn": [
                                "[concat('Microsoft.Search/searchServices/', variables('name-compliant-azureAiSearch'))]"
                            ],
                            "properties": {
                                "workspaceId": "[concat(subscription().id, '/resourceGroups/', parameters('rgName'), '/providers/Microsoft.OperationalInsights/workspaces/', variables('name-compliant-azMon'))]",
                                "logs": [
                                    {
                                        "categoryGroup": "allLogs",
                                        "enabled": true
                                    }
                                ]
                            }
                        },
                        {
                            "condition": "[and(equals(parameters('aiSearchDisableNetworkAccess'), 'Yes'), not(empty(parameters('aiSearchSubnetId'))))]",
                            "type": "Microsoft.Network/applicationSecurityGroups",
                            "apiVersion": "2023-04-01",
                            "name": "[variables('name-compliant-azureAiSearch-asg')]",
                            "location": "[parameters('aiSearchNwLocation')]",
                            "dependsOn": [
                                "[concat('Microsoft.Search/searchServices/', variables('name-compliant-azureAiSearch'))]"
                            ],
                            "properties": {}
                        },
                        {
                            "condition": "[and(equals(parameters('aiSearchDisableNetworkAccess'), 'Yes'), not(empty(parameters('aiSearchSubnetId'))))]",
                            "type": "Microsoft.Network/privateEndpoints",
                            "apiVersion": "2021-05-01",
                            "name": "[variables('name-compliant-azureAiSearch-pe')]",
                            "location": "[parameters('aiSearchNwLocation')]",
                            "dependsOn": [
                                "[concat('Microsoft.Search/searchServices/', variables('name-compliant-azureAiSearch'))]",
                                "[concat('Microsoft.Network/applicationSecurityGroups/', variables('name-compliant-azureAiSearch-asg'))]"
                            ],
                            "properties": {
                                "customNetworkInterfaceName": "[variables('name-compliant-azureAiSearch-nic')]",
                                "privateLinkServiceConnections": [
                                    {
                                        "name": "[variables('name-compliant-azureAiSearch')]",
                                        "properties": {
                                            "privateLinkServiceId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('rgName'), '/providers/Microsoft.Search/searchServices/', variables('name-compliant-azureAiSearch'))]",
                                            "groupIds": [
                                                "searchService"
                                            ]
                                        }
                                    }
                                ],
                                "subnet": {
                                    "id": "[parameters('aiSearchSubnetId')]"
                                },
                                "applicationSecurityGroups": [
                                    {
                                        "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('rgName'), '/providers/Microsoft.Network/applicationSecurityGroups/', variables('name-compliant-azureAiSearch-asg'))]"
                                    }
                                ]
                            }
                        },
                        {
                            //create shared private link cosmos
                            "type": "Microsoft.Search/searchServices/sharedPrivateLinkResources",
                            "apiVersion": "2022-09-01",
                            "name": "[concat(variables('name-compliant-azureAiSearch'), '/', variables('name-compliant-azureAiSearch-sharedpl-cosmos'))]",
                            "location": "[parameters('location')]",
                            "dependsOn": [
                                "[concat('Microsoft.Search/searchServices/', variables('name-compliant-azureAiSearch'))]",
                                "[concat('Microsoft.Network/privateEndpoints/', variables('name-compliant-azureAiSearch-pe'))]"
                            ],
                            "properties": {
                                "privateLinkResourceId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('rgName'), '/providers/Microsoft.DocumentDB/databaseAccounts/', parameters('cosmosaccountName'))]",
                                "groupId": "Sql",
                                "requestMessage": "Please approve this connection."
                            }
                        },
                        {
                            //create shared private link for openAI
                            "type": "Microsoft.Search/searchServices/sharedPrivateLinkResources",
                            "apiVersion": "2023-11-01",
                            "name": "[concat(variables('name-compliant-azureAiSearch'), '/', variables('name-compliant-azureAiSearch-sharedpl-oai'))]",
                            "location": "[parameters('location')]",
                            "dependsOn": [
                                "[concat('Microsoft.Search/searchServices/', variables('name-compliant-azureAiSearch'))]"
                            ],
                            "properties": {
                                "privateLinkResourceId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('rgName'), '/providers/Microsoft.CognitiveServices/accounts/', parameters('openAiName'))]",
                                "groupId": "openai_account",
                                "requestMessage": "Please approve this connection - OPenAi."
                            }
                        }
                    ]
                }
            }
        }
    ],
    "outputs": {
        "aisearchPEnic": {
            "type": "string",
            "value": "[variables('name-compliant-azureAiSearch-nic')]"
        },
        "aisearchName": {
            "type": "string",
            "value": "[variables('name-compliant-azureAiSearch')]"
        }
    }
}